<statements>
  <letStatement>
    <keyword> let </keyword>
    <identifier> x </identifier>
    <symbol> = </symbol>
    <expression>
      <term>
        <integerConstant> 3 </integerConstant>
      </term>
    </expression>
    <symbol> ; </symbol>
  </letStatement>
  <letStatement>
    <keyword> let </keyword>
    <identifier> array </identifier>
    <symbol> [ </symbol>
    <expression>
      <term>
        <integerConstant> 5 </integerConstant>
      </term>
    </expression>
    <symbol> ] </symbol>
    <symbol> = </symbol>
    <expression>
      <term>
        <integerConstant> 10 </integerConstant>
      </term>
    </expression>
    <symbol> ; </symbol>
  </letStatement>
  <ifStatement>
    <keyword> if </keyword>
    <symbol> ( </symbol>
    <expression>
      <term>
        <identifier> x </identifier>
      </term>
      <symbol> &gt; </symbol>
      <term>
        <integerConstant> 0 </integerConstant>
      </term>
    </expression>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> y </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
            <integerConstant> 2 </integerConstant>
          </term>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    </statements>
    <symbol> } </symbol>
  </ifStatement>
  <whileStatement>
    <keyword> while </keyword>
    <symbol> ( </symbol>
    <expression>
      <term>
        <identifier> x </identifier>
      </term>
      <symbol> &gt; </symbol>
      <term>
        <integerConstant> 0 </integerConstant>
      </term>
    </expression>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> x </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
            <identifier> x </identifier>
          </term>
          <symbol> - </symbol>
          <term>
            <integerConstant> 1 </integerConstant>
          </term>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    </statements>
    <symbol> } </symbol>
  </whileStatement>
  <doStatement>
    <keyword> do </keyword>
    <identifier> Output </identifier>
    <symbol> . </symbol>
    <identifier> printInt </identifier>
    <symbol> ( </symbol>
    <expressionList>
      <expression>
        <term>
          <integerConstant> 5 </integerConstant>
        </term>
      </expression>
    </expressionList>
    <symbol> ) </symbol>
    <symbol> ; </symbol>
  </doStatement>
  <returnStatement>
    <keyword> return </keyword>
    <expression>
      <term>
        <identifier> x </identifier>
      </term>
      <symbol> + </symbol>
      <term>
        <identifier> y </identifier>
      </term>
    </expression>
    <symbol> ; </symbol>
  </returnStatement>
</statements>
